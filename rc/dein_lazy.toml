[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'TextYankPost'
on_source = ['denite.nvim']

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_add = '''
    nnoremap <silent> ;r
        \ :<C-u>Denite -buffer-name=register
        \ register neoyank<CR>
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_source = '''
let g:deoplete#enable_at_startup = 1
'''
on_i = 1

[[plusing]]
repo = 'Shougo/neosnippet.vim'
hook_source = '''
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
    if has('conceal')
    set conceallevel=2 concealcursor=niv
    endif
'''
on_i  = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

#
# c/c++
#
[[plugins]]
repo = 'rhysd/vim-clang-format'
on_ft = ['c', 'cpp']
hook_add = '''
    let g:clang_format#code_style = "google"
    let g:clang_format#style_options = {
        \ "AccessModifierOffset" : -4,
        \ "AllowShortIfStatementsOnASingleLine" : "true",
        \ "AlwaysBreakTemplateDeclarations" : "true",
        \ "Standard" : "C++11"}

    " map to <Leader>cf in c/c++ code
    autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
    autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
'''

[[plugins]]
repo = 'justmao945/vim-clang'
on_ft = ['c', 'cpp']
hook_add = '''
    let g:clang_c_options = '-std=c11'
    let g:clang_cpp_options = '-std=c++11 -stdlib=libc++'
'''

[[plugins]]
repo = 'vim-scripts/gtags.vim'
on_ft = ['c', 'cpp']
hook_add = '''
    nnoremap <C-h> :Gtags -f %<CR>
    nnoremap <C-j> :GtagsCursor<CR>
    nnoremap <C-n> :cn<CR>
    nnoremap <C-p> :cp<CR>
'''
